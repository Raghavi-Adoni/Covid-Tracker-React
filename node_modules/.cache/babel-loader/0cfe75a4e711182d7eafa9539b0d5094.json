{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Raghavi\\\\Desktop\\\\New folder\\\\web\\\\cor-tracker\\\\src\\\\components\\\\Chart\\\\Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData, fetchData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from '../Chart/Chart.module.css';\n\nconst Chart = ({\n  data,\n  country\n}) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchApi = async () => {\n      const dailyData = await fetchDailyData();\n      setDailyData(dailyData);\n    };\n\n    fetchApi();\n  });\n  const lineChartData = {\n    labels: dailyData.map(({\n      date\n    }) => date),\n    datasets: [{\n      data: dailyData.map(({\n        confirmed\n      }) => confirmed),\n      label: 'Infected',\n      borderColor: '#3333ff',\n      fill: true\n    }, {\n      data: dailyData.map(({\n        deaths\n      }) => deaths),\n      label: 'Deaths',\n      borderColor: 'red',\n      fill: true,\n      backgroundColor: 'rgba(255,0,0,0.5)'\n    }]\n  };\n  const barChartData = {\n    labels: [Infected, Recovered, Deaths],\n    datasets: [{\n      data: data.map(({\n        confirmed\n      }) => confirmed)\n    }, {\n      data: data.map(({\n        recovered\n      }) => recovered)\n    }, {\n      data: dailyData.map(({\n        deaths\n      }) => deaths)\n    }]\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: lineChartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }) : null, country ? /*#__PURE__*/React.createElement(Bar, {\n    data: barChartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }\n  }) : null);\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/Raghavi/Desktop/New folder/web/cor-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","fetchData","Line","Bar","styles","Chart","data","country","dailyData","setDailyData","fetchApi","lineChartData","labels","map","date","datasets","confirmed","label","borderColor","fill","deaths","backgroundColor","barChartData","Infected","Recovered","Deaths","recovered","container","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAAQC,cAAR,EAAwBC,SAAxB,QAAwC,WAAxC;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AAEA,OAAOC,MAAP,MAAmB,2BAAnB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AAGAC,EAAAA,SAAS,CAAG,MAAM;AACd,UAAMW,QAAQ,GAAG,YAAY;AACzB,YAAMF,SAAS,GAAG,MAAMR,cAAc,EAAtC;AACAS,MAAAA,YAAY,CAACD,SAAD,CAAZ;AACH,KAHD;;AAKAE,IAAAA,QAAQ;AAEX,GARQ,CAAT;AAUA,QAAMC,aAAa,GAAG;AAClBC,IAAAA,MAAM,EAAEJ,SAAS,CAACK,GAAV,CAAc,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAcA,IAA5B,CADU;AAElBC,IAAAA,QAAQ,EAAE,CAAC;AACKT,MAAAA,IAAI,EAAEE,SAAS,CAACK,GAAV,CAAc,CAAC;AAAEG,QAAAA;AAAF,OAAD,KAAmBA,SAAjC,CADX;AAEKC,MAAAA,KAAK,EAAE,UAFZ;AAGKC,MAAAA,WAAW,EAAE,SAHlB;AAIKC,MAAAA,IAAI,EAAE;AAJX,KAAD,EAME;AACIb,MAAAA,IAAI,EAAEE,SAAS,CAACK,GAAV,CAAc,CAAC;AAAEO,QAAAA;AAAF,OAAD,KAAgBA,MAA9B,CADV;AAEIH,MAAAA,KAAK,EAAE,QAFX;AAGIC,MAAAA,WAAW,EAAE,KAHjB;AAIIC,MAAAA,IAAI,EAAE,IAJV;AAKIE,MAAAA,eAAe,EAAE;AALrB,KANF;AAFQ,GAAtB;AAkBE,QAAMC,YAAY,GAAG;AACnBV,IAAAA,MAAM,EAAC,CAACW,QAAD,EAAUC,SAAV,EAAoBC,MAApB,CADY;AAEnBV,IAAAA,QAAQ,EAAE,CAAC;AACKT,MAAAA,IAAI,EAAEA,IAAI,CAACO,GAAL,CAAS,CAAC;AAAEG,QAAAA;AAAF,OAAD,KAAmBA,SAA5B;AADX,KAAD,EAGE;AACIV,MAAAA,IAAI,EAAEA,IAAI,CAACO,GAAL,CAAS,CAAC;AAAEa,QAAAA;AAAF,OAAD,KAAmBA,SAA5B;AADV,KAHF,EAME;AACIpB,MAAAA,IAAI,EAAEE,SAAS,CAACK,GAAV,CAAc,CAAC;AAAEO,QAAAA;AAAF,OAAD,KAAgBA,MAA9B;AADV,KANF;AAFS,GAArB;AAaF,sBACI;AAAK,IAAA,SAAS,EAAEhB,MAAM,CAACuB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEMnB,SAAS,CAACoB,MAAV,gBAEF,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEjB,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFE,GAIN,IANA,EAOEJ,OAAO,gBAEN,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAEe,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFM,GAIV,IAXC,CADJ;AAeH,CA5DD;;AA8DA,eAAejB,KAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport {fetchDailyData, fetchData} from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from '../Chart/Chart.module.css';\r\n\r\nconst Chart = ({ data, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    \r\n    useEffect ( () => {\r\n        const fetchApi = async () => {\r\n            const dailyData = await fetchDailyData();\r\n            setDailyData(dailyData);\r\n        } \r\n        \r\n        fetchApi();\r\n\r\n    });\r\n\r\n    const lineChartData = {\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [{\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true,\r\n                    },\r\n                    {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        fill: true,\r\n                        backgroundColor: 'rgba(255,0,0,0.5)',\r\n\r\n                    } ],\r\n      }\r\n       \r\n      const barChartData = {\r\n        labels:[Infected,Recovered,Deaths],\r\n        datasets: [{\r\n                        data: data.map(({ confirmed }) => confirmed),\r\n                    },\r\n                    {\r\n                        data: data.map(({ recovered }) => recovered),  \r\n                    },\r\n                    {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                    } ],\r\n      }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n         {/* check if data fetched or not */}\r\n            { dailyData.length ? \r\n        (\r\n            <Line data={lineChartData}/>\r\n        ) :\r\n        null}\r\n        { country ? \r\n       (\r\n           <Bar data={barChartData}/>\r\n       ):\r\n       null }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;\r\n"]},"metadata":{},"sourceType":"module"}