{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Raghavi\\\\Desktop\\\\New folder\\\\web\\\\cor-tracker\\\\src\\\\components\\\\Chart\\\\Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line } from 'react-chartjs-2';\nimport styles from '../Chart/Chart.module.css';\n\nconst Chart = () => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchApi = async () => {\n      const dailyData = await fetchDailyData();\n      setDailyData(dailyData);\n    };\n\n    fetchApi(); //console.log(dailyData);\n  });\n  const lineChart = // check if data fetched or not\n  // const {confirmed_data} = dailyData.map(({ date }) => date);\n  dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      // label and dataset needs to be an array\n      // destructure date and return it\n      label: dailyData.map(({\n        date\n      }) => date).values,\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        fill: true,\n        backgroundColor: 'rgba(255,0,0,0.5)'\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/Raghavi/Desktop/New folder/web/cor-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","styles","Chart","dailyData","setDailyData","fetchApi","lineChart","length","label","map","date","values","datasets","data","confirmed","borderColor","fill","deaths","backgroundColor","container"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAAQC,cAAR,QAA6B,WAA7B;AACA,SAASC,IAAT,QAAqB,iBAArB;AAEA,OAAOC,MAAP,MAAmB,2BAAnB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAChB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AAGAC,EAAAA,SAAS,CAAG,MAAM;AACd,UAAMO,QAAQ,GAAG,YAAY;AACzB,YAAMF,SAAS,GAAG,MAAMJ,cAAc,EAAtC;AACAK,MAAAA,YAAY,CAACD,SAAD,CAAZ;AACH,KAHD;;AAKAE,IAAAA,QAAQ,GANM,CAOd;AACH,GARQ,CAAT;AAWA,QAAMC,SAAS,GACX;AACD;AACCH,EAAAA,SAAS,CAACI,MAAV,gBAEI,oBAAC,IAAD;AACI,IAAA,IAAI,EAAI;AACJ;AACA;AACAC,MAAAA,KAAK,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,EAAkCC,MAHrC;AAIJC,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,IAAI,EAAEV,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEK,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADC;AAEPN,QAAAA,KAAK,EAAE,UAFA;AAGPO,QAAAA,WAAW,EAAE,SAHN;AAIPC,QAAAA,IAAI,EAAE;AAJC,OAAD,EAMV;AACIH,QAAAA,IAAI,EAAEV,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEQ,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADV;AAEIT,QAAAA,KAAK,EAAE,QAFX;AAGIO,QAAAA,WAAW,EAAE,KAHjB;AAIIC,QAAAA,IAAI,EAAE,IAJV;AAKIE,QAAAA,eAAe,EAAE;AALrB,OANU;AAJN,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,GAwBA,IA3BJ;AA6BA,sBACI;AAAK,IAAA,SAAS,EAAEjB,MAAM,CAACkB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKb,SADL,CADJ;AAKH,CAjDD;;AAmDA,eAAeJ,KAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport styles from '../Chart/Chart.module.css';\r\n\r\nconst Chart = () => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    \r\n    useEffect ( () => {\r\n        const fetchApi = async () => {\r\n            const dailyData = await fetchDailyData();\r\n            setDailyData(dailyData);\r\n        } \r\n        \r\n        fetchApi();\r\n        //console.log(dailyData);\r\n    });\r\n\r\n   \r\n    const lineChart = (\r\n        // check if data fetched or not\r\n       // const {confirmed_data} = dailyData.map(({ date }) => date);\r\n        dailyData.length ? \r\n        (\r\n            <Line\r\n                data = {{\r\n                    // label and dataset needs to be an array\r\n                    // destructure date and return it\r\n                    label: dailyData.map(({ date }) => date).values,\r\n                    datasets: [{\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true,\r\n                    },\r\n                    {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        fill: true,\r\n                        backgroundColor: 'rgba(255,0,0,0.5)',\r\n\r\n                    } ],\r\n                }}\r\n            />\r\n        ) :\r\n        null\r\n    );\r\n    return (\r\n        <div className={styles.container}>\r\n            {lineChart}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;\r\n"]},"metadata":{},"sourceType":"module"}